{"version":3,"sources":["components/PrefCheckBox.tsx","components/PopulationChart.tsx","utils/randomColor.ts","logics/ResasApiError.ts","logics/AppState.ts","logics/ResasApiService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PrefCheckBox","props","rootClassName","checked","className","onClick","type","readOnly","prefName","PopulationChart","width","aspect","data","margin","top","right","left","bottom","strokeDasharray","dataKey","yAxisId","wrapperStyle","fontSize","Object","keys","map","d","key","stroke","_","Math","floor","random","toString","join","ResasApiError","statusCode","description","Error","resasApiService","apiKey","endpoint","get","apiPath","params","a","async","url","fetch","headers","response","status","json","resObj","prefectures","result","populationCompositionPerYear","prefCode","cityCode","addArea","URLSearchParams","append","String","area","App","React","useState","checkedPrefs","setCheckedPrefs","populations","setPopulations","chartData","setChartData","apiError","setApiError","useEffect","then","prefs","pref","prefecture","catch","error","console","newChartData","reduce","accum","current","population","forEach","objectYear","find","year","value","push","checkboxClickHandler","prev","changedState","state","filter","concat","useAppState","Grid","container","spacing","checkedPref","item","xs","sm","md","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3e6104e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./PrefCheckBox.css\";\r\n\r\ninterface Props {\r\n  className?: string,\r\n  checked: boolean,\r\n  prefName: string,\r\n  onClick: () => void,\r\n}\r\n\r\nexport const PrefCheckBox: React.FC<Props> = (props) => {\r\n  const rootClassName = props.checked \r\n  ? `PrefCheckBox-root PrefCheckBox-root-checked ${props.className}`\r\n  : `PrefCheckBox-root ${props.className}`\r\n\r\n  return (\r\n    <div\r\n      className={rootClassName}\r\n      onClick={props.onClick}>\r\n      <input\r\n        className=\"PrefCheckBox-checkbox\"\r\n        type=\"checkbox\"\r\n        checked={props.checked}\r\n        readOnly />\r\n      <span>\r\n        {props.prefName}\r\n      </span>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\r\n} from 'recharts';\r\nimport { randomColor } from '../utils/randomColor';\r\nimport { ChartData } from '../logics/entites';\r\n\r\nexport const PopulationChart: React.FC<{ data: ChartData[] }> = (props) => {\r\n  return (\r\n    <ResponsiveContainer width=\"95%\" aspect={1.6}>\r\n      <LineChart\r\n        data={props.data}\r\n        margin={{\r\n          top: 5, right: 30, left: 20, bottom: 20,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"year\" />\r\n        <YAxis yAxisId=\"left\" />\r\n        <Tooltip />\r\n        <Legend wrapperStyle={{ fontSize: \"calc(6px + 2vmin)\" }} />\r\n        {props.data[0] && Object.keys(props.data[0]).map(d => (\r\n          (d !== \"year\") &&\r\n          <Line key={d}\r\n            yAxisId=\"left\"\r\n            type=\"monotone\"\r\n            dataKey={d}\r\n            stroke={randomColor()}\r\n          />\r\n        ))}\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}","export const randomColor = () => {\r\n  return \"#\" + [0, 1, 2, 3, 4, 5]\r\n    .map(_ => Math.floor(Math.random() * 0x10).toString(16))\r\n    .join(\"\");\r\n}\r\n","export class ResasApiError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    public description: string,\r\n  ) {\r\n    super(`${statusCode} : ${description}`);\r\n  }\r\n}","import React from 'react';\r\nimport { Prefecture, Population, ChartData } from './entites';\r\nimport { ResasApiService } from './ResasApiService';\r\nimport { ResasApiError } from './ResasApiError';\r\n\r\nconst resasApiService = new ResasApiService(\"25BO76EGI4g8ugQJGIAqzWk93rVrWVxZuxW02TJp\");\r\n\r\nexport default () => {\r\n  const [checkedPrefs, setCheckedPrefs] = React.useState<{ prefecture: Prefecture, checked: boolean }[]>([]);\r\n  const [populations, setPopulations] = React.useState<{ prefecture: Prefecture, population: Population }[]>([]);\r\n  const [chartData, setChartData] = React.useState<ChartData[]>([]);\r\n  const [apiError, setApiError] = React.useState<ResasApiError>();\r\n\r\n  React.useEffect(() => {\r\n    resasApiService.prefectures()\r\n      .then(prefs => setCheckedPrefs(prefs.map(pref => ({ prefecture: pref, checked: false }))))\r\n      .catch(error => {\r\n        if (error instanceof ResasApiError) {\r\n          setApiError(error);\r\n        } else {\r\n          console.error(error);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const newChartData = populations.reduce<ChartData[]>((accum, current) => {\r\n      // Population.data[0].label is equal to \"総人口\".\r\n      current.population.data[0].data.forEach(d => {\r\n        const objectYear = accum.find(a => a.year === d.year);\r\n        if (objectYear) {\r\n          objectYear[current.prefecture.prefName] = d.value;\r\n        } else {\r\n          accum.push({\r\n            year: d.year,\r\n            [current.prefecture.prefName]: d.value,\r\n          });\r\n        }\r\n      });\r\n\r\n      return accum;\r\n    }, []);\r\n    setChartData(newChartData);\r\n  }, [populations]);\r\n\r\n  const checkboxClickHandler = (prefCode: number) => () => {\r\n    setCheckedPrefs(prev => {\r\n      const changedState = prev.find(state => state.prefecture.prefCode === prefCode);\r\n      if (changedState) {\r\n        if (changedState.checked) {\r\n          // It will be unchecked. So remove it from `populations` state.\r\n          setPopulations(prev => prev.filter(state =>\r\n            state.prefecture.prefCode !== changedState.prefecture.prefCode));\r\n        } else {\r\n          // It will be checked. So add it to `populations` state.\r\n          resasApiService.populationCompositionPerYear(changedState.prefecture.prefCode)\r\n            .then(population => {\r\n              setPopulations(prev => prev.concat({\r\n                prefecture: changedState.prefecture,\r\n                population: population,\r\n              }));\r\n            })\r\n            .catch(error => {\r\n              if (error instanceof ResasApiError) {\r\n                setApiError(error);\r\n              } else {\r\n                console.error(error);\r\n              }\r\n            });\r\n        }\r\n      }\r\n\r\n      return prev.map(state => {\r\n        if (state.prefecture.prefCode === prefCode) {\r\n          return {\r\n            prefecture: state.prefecture,\r\n            checked: !state.checked,\r\n          };\r\n        } else {\r\n          return state;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  return {\r\n    checkedPrefs,\r\n    apiError,\r\n    chartData,\r\n    checkboxClickHandler,\r\n  }\r\n}","import { ResasApiError } from \"./ResasApiError\";\r\nimport { Prefecture, Population } from \"./entites\";\r\n\r\nexport class ResasApiService {\r\n  private endpoint = \"https://opendata.resas-portal.go.jp\";\r\n\r\n  constructor(private apiKey: string) { }\r\n\r\n  get = async (apiPath: string, params?: URLSearchParams): Promise<any> => {\r\n    const url = params ? `${this.endpoint}/${apiPath}?${params}` : `${this.endpoint}/${apiPath}`;\r\n\r\n    const response = await fetch(url, { headers: { \"X-API-KEY\": this.apiKey } });\r\n    \r\n    if (response.status >= 500 && response.status < 600) {\r\n      throw new ResasApiError(response.status, \"RESAS Server Error\");\r\n    }\r\n\r\n    const resObj = await response.json();\r\n\r\n    if (response.status === 429 || resObj === \"429\" || resObj.statusCode === \"429\") {\r\n      throw new ResasApiError(429, \"Too Many Requests\");\r\n    }\r\n\r\n    if (resObj === \"400\") {\r\n      throw new ResasApiError(400, \"Bad Request\");\r\n    }\r\n\r\n    if (resObj.statusCode === \"403\") {\r\n      throw new ResasApiError(403, \"Forbidden\");\r\n    }\r\n\r\n    if (resObj === \"404\" || resObj.statusCode === \"404\") {\r\n      throw new ResasApiError(404, \"Not Found\");\r\n    }\r\n\r\n    return resObj;\r\n  }\r\n\r\n  prefectures = async (): Promise<Prefecture[]> => {\r\n    const response = await this.get(\"api/v1/prefectures\");\r\n    return response.result;\r\n  }\r\n\r\n  populationCompositionPerYear = async (\r\n    prefCode: number,\r\n    cityCode: string = \"-\",\r\n    addArea?: { prefCode: number, cityCode?: string }[]): Promise<Population> => {\r\n    const params = new URLSearchParams();\r\n    params.append(\"prefCode\", String(prefCode));\r\n    params.append(\"cityCode\", cityCode);\r\n\r\n    if (addArea) {\r\n      params.append(\"addArea\", addArea.map(area => {\r\n        if (area.cityCode) {\r\n          return `${area.prefCode}_${area.cityCode}`;\r\n        } else {\r\n          return `${area.prefCode}_`;\r\n        }\r\n      }).join(\",\"));\r\n    }\r\n\r\n    const response = await this.get(\"api/v1/population/composition/perYear\", params);\r\n    return response.result;\r\n  }\r\n}","import React from 'react';\nimport { Grid } from \"@material-ui/core\";\nimport './App.css';\nimport { PrefCheckBox } from './components/PrefCheckBox';\nimport { PopulationChart } from './components/PopulationChart';\nimport useAppState from \"./logics/AppState\";\n\nconst App: React.FC = () => {\n  const { checkedPrefs, checkboxClickHandler, chartData, apiError } = useAppState();\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        <header>\n          <h1>Population Chart</h1>\n        </header>\n        <Grid container spacing={1}>\n          {checkedPrefs.map(checkedPref => (\n            <Grid item\n              key={checkedPref.prefecture.prefCode}\n              xs={4} sm={3} md={2}\n            >\n              <PrefCheckBox className=\"PrefCheckBox\"\n                checked={checkedPref.checked}\n                prefName={checkedPref.prefecture.prefName}\n                onClick={checkboxClickHandler(checkedPref.prefecture.prefCode)}\n              />\n            </Grid>\n          ))}\n        </Grid>\n        {apiError && <p className=\"ErrorMessage\">{apiError.message}</p>}\n        <div className=\"App-blank\" />\n        <PopulationChart data={chartData} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}